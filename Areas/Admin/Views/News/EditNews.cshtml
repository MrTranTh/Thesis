@model Thesis.Models.Entity.News
@{
    ViewData["Title"] = "Cập nhật tin tức";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="pcoded-content">
    <!-- [ breadcrumb ] start -->
    <div class="page-header">
        <div class="page-block">
            <div class="row align-items-center">
                <div class="col-md-12">
                    <div class="page-header-title">
                        <h5 class="m-b-10">Cập nhật</h5>
                    </div>
                    <ul class="breadcrumb">
                        <li class="breadcrumb-item"><a href="index.html"><i class="feather icon-home"></i></a></li>                          
                        <li class="breadcrumb-item"><a href="/Admin/News">Quản lý Tin tức</a></li>
                        <li class="breadcrumb-item"><a href="#">Cập nhật</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- [ breadcrumb ] end -->
    <!-- [ Main Content ] start -->

    @using (Html.BeginForm("EditNews", "News", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(false)
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.CategoriesId)
        @Html.HiddenFor(x => x.CreatedDate)
        <div class="form-row">
            <div class="form-group col-md-12">
                <label for="inputEmail4">Tiêu đề</label>
                @Html.TextBoxFor(x => x.Title, new {@class = "form-control", @id="titleTinTuc"})
                @Html.ValidationMessageFor(x => x.Title, null,  new{@class="text-danger"})
            </div>
            <div class="form-group col-md-12">
                <label for="inputEmail4">Alias</label>
                @Html.TextBoxFor(x => x.Alias, new {@class = "form-control", @id="aliasTinTuc"})
            </div>
            <div class="form-group col-md-12">
                <label for="inputEmail4">Ảnh đại diện</label>
                <div class="custom-file">
                    @Html.TextBoxFor(x => x.Image, new {@class = "form-control", @id ="txtImage"})
                    <button type="button" onclick="BrowseServer('txtImage')">Chọn ảnh </button>
                        <!--<span class="input-group-btn">
                                <input type="button" value="Tải ảnh" name = "hinhAnh">
                        </span>-->
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="inputAddress">Mô tả</label>
            @Html.TextAreaFor(x => x.Description, new {@class = "form-control"})
        </div>
        <div class="form-group">
            <label for="inputAddress">Chi tiết</label>
            @Html.TextAreaFor(x => x.Detail, new {@class = "form-control", @id ="txtDetail"})
        </div>
        <div class="form-group">
            <label for="inputAddress">Seo Title</label>
            @Html.TextAreaFor(x => x.SeoTitle, new {@class = "form-control"})
        </div>
        <div class="form-group">
            <label for="inputAddress2">Seo Description</label>
            @Html.TextAreaFor(x => x.SeoDescription, new {@class = "form-control"})                   
        </div>
        <div class="form-group">
            <label for="inputAddress2">Seo Keyword</label>
            @Html.TextAreaFor(x => x.SeoKeywords, new {@class = "form-control"})
        </div>
        <div class="form-group">
            <label for="inputAddress">Hiển thị</label>
            @Html.CheckBoxFor(x => x.isActive)
        </div>
        <a href="/Admin/News" class="btn  btn-danger">Quay lại</a>
        <button type="submit" class="btn  btn-primary">Cập nhật</button>
}

    <!-- [ Main Content ] end -->
</div>
@section scripts{
    <script>
        //Tạp plugin elfinder trong Summernote
        (function (factory) {
            if (typeof define === 'function' && define.amd) {
                define(['jquery'], factory);
            } 
            else if (typeof module === 'object' && module.exports) {
                module.exports = factory(require('jquery'));
            } else {
                factory(window.jQuery);
            }
        }
        (function ($) {
                $.extend($.summernote.plugins, {
                    // Tạo plugin tên elfinder  
                    'elfinder': function (context) {
                        var self = this;
                        // ui has renders to build ui elements.
                        var ui = $.summernote.ui;
                        // Tạo nút bấm
                        context.memo('button.elfinder', function () {
                            var button = ui.button({
                                contents: '<i class="note-icon-picture"/> elFinder',
                                tooltip: 'Quản lý file',
                                click: function () {
                                    // Bấm vào nút bấm gọi hàm elfinderDialog   
                                    elfinderDialog(context); 
                                }
                            });
                            // create jQuery object from button instance.
                            var $elfinder = button.render();
                            return $elfinder;
                        });
                        // This methods will be called when editor is destroyed by $('..').summernote('destroy');
                        // You should remove elements on `initialize`.
                        this.destroy = function () {
                            this.$panel.remove();
                            this.$panel = null;
                        };
                    }

                });
        }));
        function elfinderDialog(editor) {
            var fm = $('<div/>').dialogelfinder({
            baseUrl: "@Url.Content("~/lib/elfinder/")",
            url: "@Url.Action("Connector","FileManager", new{area="Files"})",
            lang : 'vi',
            width : 840,
            height: 450,
            destroyOnClose : true,
            getFileCallback : function(files, fm) {
                console.log(files);
                        editor.invoke('editor.insertImage', files.url);
            },
            commandsOptions : {
                getfile : {
                    oncomplete : 'close',
                    folders : false
                }
            }
            }).dialogelfinder('instance');
        }
        //Tạo Summernote
        $(document).ready(function(){
            $('#txtDetail').summernote({
            height: 120,
            toolbar: [
                ['style', ['style']],
                ['font', ['bold', 'underline', 'clear']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['table', ['table']],
                ['insert', ['link', 'picture', 'video', 'elfinder']],
                ['view', ['fullscreen', 'codeview', 'help']]
            ]
            });
        });

        //Tạo alias tự động
        $(document).ready(function () {
            $('#titleTinTuc').on('keyup', function () {
                var tieuDe = $(this).val();
                var alias = chuyenDoiAlias(tieuDe);
                $('#aliasTinTuc').val(alias);
            });

            function chuyenDoiAlias(tieuDe) {
                // Chuyển tiếng Việt có dấu thành không dấu
                var tmp = tieuDe
                    .toLowerCase()
                    .normalize("NFD")
                    .replace(/[\u0300-\u036f]/g, "");

                // Xóa các ký tự không mong muốn
                var alias = tmp.replace(/[^a-z0-9\s]/g, '');

                // Thay thế khoảng trắng bằng dấu "-"
                alias = alias.replace(/\s+/g, '-');

                // Loại bỏ các dấu "-" liên tiếp và dấu "-" ở đầu và cuối chuỗi
                alias = alias.replace(/-+/g, '-').replace(/^-+|-+$/g, '');

                return alias;
            }
        });
    </script>
}





